// Code generated by Prisma (prisma@1.25.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deployment: (where?: DeploymentWhereInput) => Promise<boolean>;
  email: (where?: EmailWhereInput) => Promise<boolean>;
  inviteToken: (where?: InviteTokenWhereInput) => Promise<boolean>;
  localCredential: (where?: LocalCredentialWhereInput) => Promise<boolean>;
  oAuthCredential: (where?: OAuthCredentialWhereInput) => Promise<boolean>;
  roleBinding: (where?: RoleBindingWhereInput) => Promise<boolean>;
  serviceAccount: (where?: ServiceAccountWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workspace: (where?: WorkspaceWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deployment: (where: DeploymentWhereUniqueInput) => DeploymentPromise;
  deployments: (
    args?: {
      where?: DeploymentWhereInput;
      orderBy?: DeploymentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Deployment>;
  deploymentsConnection: (
    args?: {
      where?: DeploymentWhereInput;
      orderBy?: DeploymentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DeploymentConnectionPromise;
  email: (where: EmailWhereUniqueInput) => EmailPromise;
  emails: (
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Email>;
  emailsConnection: (
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EmailConnectionPromise;
  inviteToken: (where: InviteTokenWhereUniqueInput) => InviteTokenPromise;
  inviteTokens: (
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<InviteToken>;
  inviteTokensConnection: (
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InviteTokenConnectionPromise;
  localCredential: (
    where: LocalCredentialWhereUniqueInput
  ) => LocalCredentialPromise;
  localCredentials: (
    args?: {
      where?: LocalCredentialWhereInput;
      orderBy?: LocalCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LocalCredential>;
  localCredentialsConnection: (
    args?: {
      where?: LocalCredentialWhereInput;
      orderBy?: LocalCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocalCredentialConnectionPromise;
  oAuthCredential: (
    where: OAuthCredentialWhereUniqueInput
  ) => OAuthCredentialPromise;
  oAuthCredentials: (
    args?: {
      where?: OAuthCredentialWhereInput;
      orderBy?: OAuthCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OAuthCredential>;
  oAuthCredentialsConnection: (
    args?: {
      where?: OAuthCredentialWhereInput;
      orderBy?: OAuthCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OAuthCredentialConnectionPromise;
  roleBinding: (where: RoleBindingWhereUniqueInput) => RoleBindingPromise;
  roleBindings: (
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RoleBinding>;
  roleBindingsConnection: (
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleBindingConnectionPromise;
  serviceAccount: (
    where: ServiceAccountWhereUniqueInput
  ) => ServiceAccountPromise;
  serviceAccounts: (
    args?: {
      where?: ServiceAccountWhereInput;
      orderBy?: ServiceAccountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ServiceAccount>;
  serviceAccountsConnection: (
    args?: {
      where?: ServiceAccountWhereInput;
      orderBy?: ServiceAccountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceAccountConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  workspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  workspaces: (
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Workspace>;
  workspacesConnection: (
    args?: {
      where?: WorkspaceWhereInput;
      orderBy?: WorkspaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkspaceConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeployment: (data: DeploymentCreateInput) => DeploymentPromise;
  updateDeployment: (
    args: { data: DeploymentUpdateInput; where: DeploymentWhereUniqueInput }
  ) => DeploymentPromise;
  updateManyDeployments: (
    args: {
      data: DeploymentUpdateManyMutationInput;
      where?: DeploymentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDeployment: (
    args: {
      where: DeploymentWhereUniqueInput;
      create: DeploymentCreateInput;
      update: DeploymentUpdateInput;
    }
  ) => DeploymentPromise;
  deleteDeployment: (where: DeploymentWhereUniqueInput) => DeploymentPromise;
  deleteManyDeployments: (where?: DeploymentWhereInput) => BatchPayloadPromise;
  createEmail: (data: EmailCreateInput) => EmailPromise;
  updateEmail: (
    args: { data: EmailUpdateInput; where: EmailWhereUniqueInput }
  ) => EmailPromise;
  updateManyEmails: (
    args: { data: EmailUpdateManyMutationInput; where?: EmailWhereInput }
  ) => BatchPayloadPromise;
  upsertEmail: (
    args: {
      where: EmailWhereUniqueInput;
      create: EmailCreateInput;
      update: EmailUpdateInput;
    }
  ) => EmailPromise;
  deleteEmail: (where: EmailWhereUniqueInput) => EmailPromise;
  deleteManyEmails: (where?: EmailWhereInput) => BatchPayloadPromise;
  createInviteToken: (data: InviteTokenCreateInput) => InviteTokenPromise;
  updateInviteToken: (
    args: { data: InviteTokenUpdateInput; where: InviteTokenWhereUniqueInput }
  ) => InviteTokenPromise;
  updateManyInviteTokens: (
    args: {
      data: InviteTokenUpdateManyMutationInput;
      where?: InviteTokenWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertInviteToken: (
    args: {
      where: InviteTokenWhereUniqueInput;
      create: InviteTokenCreateInput;
      update: InviteTokenUpdateInput;
    }
  ) => InviteTokenPromise;
  deleteInviteToken: (where: InviteTokenWhereUniqueInput) => InviteTokenPromise;
  deleteManyInviteTokens: (
    where?: InviteTokenWhereInput
  ) => BatchPayloadPromise;
  createLocalCredential: (
    data: LocalCredentialCreateInput
  ) => LocalCredentialPromise;
  updateLocalCredential: (
    args: {
      data: LocalCredentialUpdateInput;
      where: LocalCredentialWhereUniqueInput;
    }
  ) => LocalCredentialPromise;
  updateManyLocalCredentials: (
    args: {
      data: LocalCredentialUpdateManyMutationInput;
      where?: LocalCredentialWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertLocalCredential: (
    args: {
      where: LocalCredentialWhereUniqueInput;
      create: LocalCredentialCreateInput;
      update: LocalCredentialUpdateInput;
    }
  ) => LocalCredentialPromise;
  deleteLocalCredential: (
    where: LocalCredentialWhereUniqueInput
  ) => LocalCredentialPromise;
  deleteManyLocalCredentials: (
    where?: LocalCredentialWhereInput
  ) => BatchPayloadPromise;
  createOAuthCredential: (
    data: OAuthCredentialCreateInput
  ) => OAuthCredentialPromise;
  updateOAuthCredential: (
    args: {
      data: OAuthCredentialUpdateInput;
      where: OAuthCredentialWhereUniqueInput;
    }
  ) => OAuthCredentialPromise;
  updateManyOAuthCredentials: (
    args: {
      data: OAuthCredentialUpdateManyMutationInput;
      where?: OAuthCredentialWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOAuthCredential: (
    args: {
      where: OAuthCredentialWhereUniqueInput;
      create: OAuthCredentialCreateInput;
      update: OAuthCredentialUpdateInput;
    }
  ) => OAuthCredentialPromise;
  deleteOAuthCredential: (
    where: OAuthCredentialWhereUniqueInput
  ) => OAuthCredentialPromise;
  deleteManyOAuthCredentials: (
    where?: OAuthCredentialWhereInput
  ) => BatchPayloadPromise;
  createRoleBinding: (data: RoleBindingCreateInput) => RoleBindingPromise;
  updateRoleBinding: (
    args: { data: RoleBindingUpdateInput; where: RoleBindingWhereUniqueInput }
  ) => RoleBindingPromise;
  updateManyRoleBindings: (
    args: {
      data: RoleBindingUpdateManyMutationInput;
      where?: RoleBindingWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRoleBinding: (
    args: {
      where: RoleBindingWhereUniqueInput;
      create: RoleBindingCreateInput;
      update: RoleBindingUpdateInput;
    }
  ) => RoleBindingPromise;
  deleteRoleBinding: (where: RoleBindingWhereUniqueInput) => RoleBindingPromise;
  deleteManyRoleBindings: (
    where?: RoleBindingWhereInput
  ) => BatchPayloadPromise;
  createServiceAccount: (
    data: ServiceAccountCreateInput
  ) => ServiceAccountPromise;
  updateServiceAccount: (
    args: {
      data: ServiceAccountUpdateInput;
      where: ServiceAccountWhereUniqueInput;
    }
  ) => ServiceAccountPromise;
  updateManyServiceAccounts: (
    args: {
      data: ServiceAccountUpdateManyMutationInput;
      where?: ServiceAccountWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertServiceAccount: (
    args: {
      where: ServiceAccountWhereUniqueInput;
      create: ServiceAccountCreateInput;
      update: ServiceAccountUpdateInput;
    }
  ) => ServiceAccountPromise;
  deleteServiceAccount: (
    where: ServiceAccountWhereUniqueInput
  ) => ServiceAccountPromise;
  deleteManyServiceAccounts: (
    where?: ServiceAccountWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkspace: (data: WorkspaceCreateInput) => WorkspacePromise;
  updateWorkspace: (
    args: { data: WorkspaceUpdateInput; where: WorkspaceWhereUniqueInput }
  ) => WorkspacePromise;
  updateManyWorkspaces: (
    args: {
      data: WorkspaceUpdateManyMutationInput;
      where?: WorkspaceWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertWorkspace: (
    args: {
      where: WorkspaceWhereUniqueInput;
      create: WorkspaceCreateInput;
      update: WorkspaceUpdateInput;
    }
  ) => WorkspacePromise;
  deleteWorkspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  deleteManyWorkspaces: (where?: WorkspaceWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deployment: (
    where?: DeploymentSubscriptionWhereInput
  ) => DeploymentSubscriptionPayloadSubscription;
  email: (
    where?: EmailSubscriptionWhereInput
  ) => EmailSubscriptionPayloadSubscription;
  inviteToken: (
    where?: InviteTokenSubscriptionWhereInput
  ) => InviteTokenSubscriptionPayloadSubscription;
  localCredential: (
    where?: LocalCredentialSubscriptionWhereInput
  ) => LocalCredentialSubscriptionPayloadSubscription;
  oAuthCredential: (
    where?: OAuthCredentialSubscriptionWhereInput
  ) => OAuthCredentialSubscriptionPayloadSubscription;
  roleBinding: (
    where?: RoleBindingSubscriptionWhereInput
  ) => RoleBindingSubscriptionPayloadSubscription;
  serviceAccount: (
    where?: ServiceAccountSubscriptionWhereInput
  ) => ServiceAccountSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workspace: (
    where?: WorkspaceSubscriptionWhereInput
  ) => WorkspaceSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OAuthCredentialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "expiresAt_ASC"
  | "expiresAt_DESC"
  | "oauthProvider_ASC"
  | "oauthProvider_DESC"
  | "oauthUserId_ASC"
  | "oauthUserId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role =
  | "WORKSPACE_ADMIN"
  | "WORKSPACE_EDITOR"
  | "WORKSPACE_VIEWER"
  | "DEPLOYMENT_ADMIN"
  | "DEPLOYMENT_EDITOR"
  | "DEPLOYMENT_VIEWER"
  | "SYSTEM_ADMIN"
  | "SYSTEM_EDITOR"
  | "SYSTEM_VIEWER";

export type DeploymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "config_ASC"
  | "config_DESC"
  | "description_ASC"
  | "description_DESC"
  | "label_ASC"
  | "label_DESC"
  | "registryPassword_ASC"
  | "registryPassword_DESC"
  | "releaseName_ASC"
  | "releaseName_DESC"
  | "version_ASC"
  | "version_DESC"
  | "extraAu_ASC"
  | "extraAu_DESC"
  | "airflowVersion_ASC"
  | "airflowVersion_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InviteTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "token_ASC"
  | "token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleBindingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "primary_ASC"
  | "primary_DESC"
  | "token_ASC"
  | "token_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LocalCredentialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "apiKey_ASC"
  | "apiKey_DESC"
  | "label_ASC"
  | "label_DESC"
  | "category_ASC"
  | "category_DESC"
  | "active_ASC"
  | "active_DESC"
  | "lastUsedAt_ASC"
  | "lastUsedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "status_ASC"
  | "status_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "avatarUrl_ASC"
  | "avatarUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkspaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "active_ASC"
  | "active_DESC"
  | "description_ASC"
  | "description_DESC"
  | "label_ASC"
  | "label_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface InviteTokenUpdateManyInput {
  create?: InviteTokenCreateInput[] | InviteTokenCreateInput;
  update?:
    | InviteTokenUpdateWithWhereUniqueNestedInput[]
    | InviteTokenUpdateWithWhereUniqueNestedInput;
  upsert?:
    | InviteTokenUpsertWithWhereUniqueNestedInput[]
    | InviteTokenUpsertWithWhereUniqueNestedInput;
  delete?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  disconnect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  deleteMany?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  updateMany?:
    | InviteTokenUpdateManyWithWhereNestedInput[]
    | InviteTokenUpdateManyWithWhereNestedInput;
}

export type DeploymentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  releaseName?: String;
}>;

export interface DeploymentUpdateWithoutWorkspaceDataInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentUpdatealertEmailsInput;
}

export interface RoleBindingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  user?: UserWhereInput;
  serviceAccount?: ServiceAccountWhereInput;
  workspace?: WorkspaceWhereInput;
  deployment?: DeploymentWhereInput;
  AND?: RoleBindingWhereInput[] | RoleBindingWhereInput;
  OR?: RoleBindingWhereInput[] | RoleBindingWhereInput;
  NOT?: RoleBindingWhereInput[] | RoleBindingWhereInput;
}

export interface DeploymentUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: DeploymentWhereUniqueInput;
  update: DeploymentUpdateWithoutWorkspaceDataInput;
  create: DeploymentCreateWithoutWorkspaceInput;
}

export interface EmailWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  primary?: Boolean;
  primary_not?: Boolean;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  user?: UserWhereInput;
  verified?: Boolean;
  verified_not?: Boolean;
  AND?: EmailWhereInput[] | EmailWhereInput;
  OR?: EmailWhereInput[] | EmailWhereInput;
  NOT?: EmailWhereInput[] | EmailWhereInput;
}

export interface DeploymentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  registryPassword?: String;
  registryPassword_not?: String;
  registryPassword_in?: String[] | String;
  registryPassword_not_in?: String[] | String;
  registryPassword_lt?: String;
  registryPassword_lte?: String;
  registryPassword_gt?: String;
  registryPassword_gte?: String;
  registryPassword_contains?: String;
  registryPassword_not_contains?: String;
  registryPassword_starts_with?: String;
  registryPassword_not_starts_with?: String;
  registryPassword_ends_with?: String;
  registryPassword_not_ends_with?: String;
  releaseName?: String;
  releaseName_not?: String;
  releaseName_in?: String[] | String;
  releaseName_not_in?: String[] | String;
  releaseName_lt?: String;
  releaseName_lte?: String;
  releaseName_gt?: String;
  releaseName_gte?: String;
  releaseName_contains?: String;
  releaseName_not_contains?: String;
  releaseName_starts_with?: String;
  releaseName_not_starts_with?: String;
  releaseName_ends_with?: String;
  releaseName_not_ends_with?: String;
  version?: String;
  version_not?: String;
  version_in?: String[] | String;
  version_not_in?: String[] | String;
  version_lt?: String;
  version_lte?: String;
  version_gt?: String;
  version_gte?: String;
  version_contains?: String;
  version_not_contains?: String;
  version_starts_with?: String;
  version_not_starts_with?: String;
  version_ends_with?: String;
  version_not_ends_with?: String;
  extraAu?: Int;
  extraAu_not?: Int;
  extraAu_in?: Int[] | Int;
  extraAu_not_in?: Int[] | Int;
  extraAu_lt?: Int;
  extraAu_lte?: Int;
  extraAu_gt?: Int;
  extraAu_gte?: Int;
  airflowVersion?: String;
  airflowVersion_not?: String;
  airflowVersion_in?: String[] | String;
  airflowVersion_not_in?: String[] | String;
  airflowVersion_lt?: String;
  airflowVersion_lte?: String;
  airflowVersion_gt?: String;
  airflowVersion_gte?: String;
  airflowVersion_contains?: String;
  airflowVersion_not_contains?: String;
  airflowVersion_starts_with?: String;
  airflowVersion_not_starts_with?: String;
  airflowVersion_ends_with?: String;
  airflowVersion_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DeploymentScalarWhereInput[] | DeploymentScalarWhereInput;
  OR?: DeploymentScalarWhereInput[] | DeploymentScalarWhereInput;
  NOT?: DeploymentScalarWhereInput[] | DeploymentScalarWhereInput;
}

export interface OAuthCredentialWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  expiresAt?: DateTimeInput;
  expiresAt_not?: DateTimeInput;
  expiresAt_in?: DateTimeInput[] | DateTimeInput;
  expiresAt_not_in?: DateTimeInput[] | DateTimeInput;
  expiresAt_lt?: DateTimeInput;
  expiresAt_lte?: DateTimeInput;
  expiresAt_gt?: DateTimeInput;
  expiresAt_gte?: DateTimeInput;
  oauthProvider?: String;
  oauthProvider_not?: String;
  oauthProvider_in?: String[] | String;
  oauthProvider_not_in?: String[] | String;
  oauthProvider_lt?: String;
  oauthProvider_lte?: String;
  oauthProvider_gt?: String;
  oauthProvider_gte?: String;
  oauthProvider_contains?: String;
  oauthProvider_not_contains?: String;
  oauthProvider_starts_with?: String;
  oauthProvider_not_starts_with?: String;
  oauthProvider_ends_with?: String;
  oauthProvider_not_ends_with?: String;
  oauthUserId?: String;
  oauthUserId_not?: String;
  oauthUserId_in?: String[] | String;
  oauthUserId_not_in?: String[] | String;
  oauthUserId_lt?: String;
  oauthUserId_lte?: String;
  oauthUserId_gt?: String;
  oauthUserId_gte?: String;
  oauthUserId_contains?: String;
  oauthUserId_not_contains?: String;
  oauthUserId_starts_with?: String;
  oauthUserId_not_starts_with?: String;
  oauthUserId_ends_with?: String;
  oauthUserId_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: OAuthCredentialWhereInput[] | OAuthCredentialWhereInput;
  OR?: OAuthCredentialWhereInput[] | OAuthCredentialWhereInput;
  NOT?: OAuthCredentialWhereInput[] | OAuthCredentialWhereInput;
}

export interface WorkspaceUpdateOneWithoutDeploymentsInput {
  create?: WorkspaceCreateWithoutDeploymentsInput;
  update?: WorkspaceUpdateWithoutDeploymentsDataInput;
  upsert?: WorkspaceUpsertWithoutDeploymentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WorkspaceWhereUniqueInput;
}

export interface InviteTokenUpdateInput {
  email?: String;
  token?: String;
  workspace?: WorkspaceUpdateOneWithoutInvitesInput;
}

export interface WorkspaceUpdateWithoutDeploymentsDataInput {
  active?: Boolean;
  description?: String;
  invites?: InviteTokenUpdateManyWithoutWorkspaceInput;
  label?: String;
  roleBindings?: RoleBindingUpdateManyWithoutWorkspaceInput;
}

export interface DeploymentUpdateManyWithWhereNestedInput {
  where: DeploymentScalarWhereInput;
  data: DeploymentUpdateManyDataInput;
}

export interface InviteTokenUpdateManyWithoutWorkspaceInput {
  create?:
    | InviteTokenCreateWithoutWorkspaceInput[]
    | InviteTokenCreateWithoutWorkspaceInput;
  delete?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  disconnect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
  update?:
    | InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput;
  upsert?:
    | InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput;
  deleteMany?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  updateMany?:
    | InviteTokenUpdateManyWithWhereNestedInput[]
    | InviteTokenUpdateManyWithWhereNestedInput;
}

export interface WorkspaceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  active?: Boolean;
  active_not?: Boolean;
  deployments_every?: DeploymentWhereInput;
  deployments_some?: DeploymentWhereInput;
  deployments_none?: DeploymentWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  invites_every?: InviteTokenWhereInput;
  invites_some?: InviteTokenWhereInput;
  invites_none?: InviteTokenWhereInput;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  roleBindings_every?: RoleBindingWhereInput;
  roleBindings_some?: RoleBindingWhereInput;
  roleBindings_none?: RoleBindingWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: WorkspaceWhereInput[] | WorkspaceWhereInput;
  OR?: WorkspaceWhereInput[] | WorkspaceWhereInput;
  NOT?: WorkspaceWhereInput[] | WorkspaceWhereInput;
}

export interface InviteTokenUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput;
  data: InviteTokenUpdateWithoutWorkspaceDataInput;
}

export interface ServiceAccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceAccountWhereInput;
  AND?:
    | ServiceAccountSubscriptionWhereInput[]
    | ServiceAccountSubscriptionWhereInput;
  OR?:
    | ServiceAccountSubscriptionWhereInput[]
    | ServiceAccountSubscriptionWhereInput;
  NOT?:
    | ServiceAccountSubscriptionWhereInput[]
    | ServiceAccountSubscriptionWhereInput;
}

export interface InviteTokenUpdateWithoutWorkspaceDataInput {
  email?: String;
  token?: String;
}

export interface RoleBindingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleBindingWhereInput;
  AND?: RoleBindingSubscriptionWhereInput[] | RoleBindingSubscriptionWhereInput;
  OR?: RoleBindingSubscriptionWhereInput[] | RoleBindingSubscriptionWhereInput;
  NOT?: RoleBindingSubscriptionWhereInput[] | RoleBindingSubscriptionWhereInput;
}

export interface InviteTokenUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: InviteTokenWhereUniqueInput;
  update: InviteTokenUpdateWithoutWorkspaceDataInput;
  create: InviteTokenCreateWithoutWorkspaceInput;
}

export interface LocalCredentialSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocalCredentialWhereInput;
  AND?:
    | LocalCredentialSubscriptionWhereInput[]
    | LocalCredentialSubscriptionWhereInput;
  OR?:
    | LocalCredentialSubscriptionWhereInput[]
    | LocalCredentialSubscriptionWhereInput;
  NOT?:
    | LocalCredentialSubscriptionWhereInput[]
    | LocalCredentialSubscriptionWhereInput;
}

export interface InviteTokenScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  OR?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
  NOT?: InviteTokenScalarWhereInput[] | InviteTokenScalarWhereInput;
}

export interface EmailSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmailWhereInput;
  AND?: EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput;
  OR?: EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput;
  NOT?: EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput;
}

export interface InviteTokenUpdateManyWithWhereNestedInput {
  where: InviteTokenScalarWhereInput;
  data: InviteTokenUpdateManyDataInput;
}

export interface WorkspaceUpdateManyMutationInput {
  active?: Boolean;
  description?: String;
  label?: String;
}

export interface InviteTokenUpdateManyDataInput {
  email?: String;
  token?: String;
}

export interface WorkspaceCreateInput {
  active?: Boolean;
  deployments?: DeploymentCreateManyWithoutWorkspaceInput;
  description?: String;
  invites?: InviteTokenCreateManyWithoutWorkspaceInput;
  label?: String;
  roleBindings?: RoleBindingCreateManyWithoutWorkspaceInput;
}

export interface RoleBindingUpdateManyWithoutWorkspaceInput {
  create?:
    | RoleBindingCreateWithoutWorkspaceInput[]
    | RoleBindingCreateWithoutWorkspaceInput;
  delete?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  connect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  disconnect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  update?:
    | RoleBindingUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | RoleBindingUpdateWithWhereUniqueWithoutWorkspaceInput;
  upsert?:
    | RoleBindingUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | RoleBindingUpsertWithWhereUniqueWithoutWorkspaceInput;
  deleteMany?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  updateMany?:
    | RoleBindingUpdateManyWithWhereNestedInput[]
    | RoleBindingUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
}

export interface RoleBindingUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: RoleBindingWhereUniqueInput;
  data: RoleBindingUpdateWithoutWorkspaceDataInput;
}

export interface UserCreateInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailCreateManyWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutUserInput;
  inviteTokens?: InviteTokenCreateManyInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
  oauthCredentials?: OAuthCredentialCreateManyWithoutUserInput;
}

export interface RoleBindingUpdateWithoutWorkspaceDataInput {
  role?: Role;
  user?: UserUpdateOneWithoutRoleBindingsInput;
  serviceAccount?: ServiceAccountUpdateOneWithoutRoleBindingInput;
  deployment?: DeploymentUpdateOneInput;
}

export interface ServiceAccountUpdateManyMutationInput {
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  lastUsedAt?: DateTimeInput;
}

export interface UserUpdateOneWithoutRoleBindingsInput {
  create?: UserCreateWithoutRoleBindingsInput;
  update?: UserUpdateWithoutRoleBindingsDataInput;
  upsert?: UserUpsertWithoutRoleBindingsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface RoleBindingUpdateWithoutServiceAccountDataInput {
  role?: Role;
  user?: UserUpdateOneWithoutRoleBindingsInput;
  workspace?: WorkspaceUpdateOneWithoutRoleBindingsInput;
  deployment?: DeploymentUpdateOneInput;
}

export interface UserUpdateWithoutRoleBindingsDataInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  inviteTokens?: InviteTokenUpdateManyInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  oauthCredentials?: OAuthCredentialUpdateManyWithoutUserInput;
}

export interface RoleBindingUpdateOneWithoutServiceAccountInput {
  create?: RoleBindingCreateWithoutServiceAccountInput;
  update?: RoleBindingUpdateWithoutServiceAccountDataInput;
  upsert?: RoleBindingUpsertWithoutServiceAccountInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: RoleBindingWhereUniqueInput;
}

export interface EmailUpdateManyWithoutUserInput {
  create?: EmailCreateWithoutUserInput[] | EmailCreateWithoutUserInput;
  delete?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
  connect?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
  disconnect?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
  update?:
    | EmailUpdateWithWhereUniqueWithoutUserInput[]
    | EmailUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | EmailUpsertWithWhereUniqueWithoutUserInput[]
    | EmailUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: EmailScalarWhereInput[] | EmailScalarWhereInput;
  updateMany?:
    | EmailUpdateManyWithWhereNestedInput[]
    | EmailUpdateManyWithWhereNestedInput;
}

export interface RoleBindingCreateWithoutServiceAccountInput {
  role?: Role;
  user?: UserCreateOneWithoutRoleBindingsInput;
  workspace?: WorkspaceCreateOneWithoutRoleBindingsInput;
  deployment?: DeploymentCreateOneInput;
}

export interface EmailUpdateWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput;
  data: EmailUpdateWithoutUserDataInput;
}

export type OAuthCredentialWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EmailUpdateWithoutUserDataInput {
  address?: String;
  primary?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface RoleBindingUpdateManyMutationInput {
  role?: Role;
}

export interface EmailUpsertWithWhereUniqueWithoutUserInput {
  where: EmailWhereUniqueInput;
  update: EmailUpdateWithoutUserDataInput;
  create: EmailCreateWithoutUserInput;
}

export type RoleBindingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EmailScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  primary?: Boolean;
  primary_not?: Boolean;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  verified?: Boolean;
  verified_not?: Boolean;
  AND?: EmailScalarWhereInput[] | EmailScalarWhereInput;
  OR?: EmailScalarWhereInput[] | EmailScalarWhereInput;
  NOT?: EmailScalarWhereInput[] | EmailScalarWhereInput;
}

export interface OAuthCredentialUpdateManyMutationInput {
  expiresAt?: DateTimeInput;
  oauthProvider?: String;
  oauthUserId?: String;
}

export interface EmailUpdateManyWithWhereNestedInput {
  where: EmailScalarWhereInput;
  data: EmailUpdateManyDataInput;
}

export type ServiceAccountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EmailUpdateManyDataInput {
  address?: String;
  primary?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface UserUpdateOneWithoutOauthCredentialsInput {
  create?: UserCreateWithoutOauthCredentialsInput;
  update?: UserUpdateWithoutOauthCredentialsDataInput;
  upsert?: UserUpsertWithoutOauthCredentialsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateOneWithoutLocalCredentialInput {
  create?: UserCreateWithoutLocalCredentialInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutOauthCredentialsInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailCreateManyWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutUserInput;
  inviteTokens?: InviteTokenCreateManyInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
}

export interface InviteTokenUpdateWithWhereUniqueNestedInput {
  where: InviteTokenWhereUniqueInput;
  data: InviteTokenUpdateDataInput;
}

export interface UserCreateOneWithoutOauthCredentialsInput {
  create?: UserCreateWithoutOauthCredentialsInput;
  connect?: UserWhereUniqueInput;
}

export interface InviteTokenUpdateDataInput {
  email?: String;
  token?: String;
  workspace?: WorkspaceUpdateOneWithoutInvitesInput;
}

export interface LocalCredentialUpdateManyMutationInput {
  password?: String;
  resetToken?: String;
}

export interface WorkspaceUpdateOneWithoutInvitesInput {
  create?: WorkspaceCreateWithoutInvitesInput;
  update?: WorkspaceUpdateWithoutInvitesDataInput;
  upsert?: WorkspaceUpsertWithoutInvitesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WorkspaceWhereUniqueInput;
}

export type WorkspaceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface WorkspaceUpdateWithoutInvitesDataInput {
  active?: Boolean;
  deployments?: DeploymentUpdateManyWithoutWorkspaceInput;
  description?: String;
  label?: String;
  roleBindings?: RoleBindingUpdateManyWithoutWorkspaceInput;
}

export interface UserUpdateOneWithoutLocalCredentialInput {
  create?: UserCreateWithoutLocalCredentialInput;
  update?: UserUpdateWithoutLocalCredentialDataInput;
  upsert?: UserUpsertWithoutLocalCredentialInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface DeploymentUpdateManyWithoutWorkspaceInput {
  create?:
    | DeploymentCreateWithoutWorkspaceInput[]
    | DeploymentCreateWithoutWorkspaceInput;
  delete?: DeploymentWhereUniqueInput[] | DeploymentWhereUniqueInput;
  connect?: DeploymentWhereUniqueInput[] | DeploymentWhereUniqueInput;
  disconnect?: DeploymentWhereUniqueInput[] | DeploymentWhereUniqueInput;
  update?:
    | DeploymentUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | DeploymentUpdateWithWhereUniqueWithoutWorkspaceInput;
  upsert?:
    | DeploymentUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | DeploymentUpsertWithWhereUniqueWithoutWorkspaceInput;
  deleteMany?: DeploymentScalarWhereInput[] | DeploymentScalarWhereInput;
  updateMany?:
    | DeploymentUpdateManyWithWhereNestedInput[]
    | DeploymentUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutLocalCredentialInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailCreateManyWithoutUserInput;
  roleBindings?: RoleBindingCreateManyWithoutUserInput;
  inviteTokens?: InviteTokenCreateManyInput;
  oauthCredentials?: OAuthCredentialCreateManyWithoutUserInput;
}

export interface DeploymentUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: DeploymentWhereUniqueInput;
  data: DeploymentUpdateWithoutWorkspaceDataInput;
}

export interface DeploymentCreateInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentCreatealertEmailsInput;
  workspace?: WorkspaceCreateOneWithoutDeploymentsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  avatarUrl?: String;
  avatarUrl_not?: String;
  avatarUrl_in?: String[] | String;
  avatarUrl_not_in?: String[] | String;
  avatarUrl_lt?: String;
  avatarUrl_lte?: String;
  avatarUrl_gt?: String;
  avatarUrl_gte?: String;
  avatarUrl_contains?: String;
  avatarUrl_not_contains?: String;
  avatarUrl_starts_with?: String;
  avatarUrl_not_starts_with?: String;
  avatarUrl_ends_with?: String;
  avatarUrl_not_ends_with?: String;
  emails_every?: EmailWhereInput;
  emails_some?: EmailWhereInput;
  emails_none?: EmailWhereInput;
  roleBindings_every?: RoleBindingWhereInput;
  roleBindings_some?: RoleBindingWhereInput;
  roleBindings_none?: RoleBindingWhereInput;
  inviteTokens_every?: InviteTokenWhereInput;
  inviteTokens_some?: InviteTokenWhereInput;
  inviteTokens_none?: InviteTokenWhereInput;
  localCredential?: LocalCredentialWhereInput;
  oauthCredentials_every?: OAuthCredentialWhereInput;
  oauthCredentials_some?: OAuthCredentialWhereInput;
  oauthCredentials_none?: OAuthCredentialWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface WorkspaceCreateOneWithoutDeploymentsInput {
  create?: WorkspaceCreateWithoutDeploymentsInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface LocalCredentialWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  AND?: LocalCredentialWhereInput[] | LocalCredentialWhereInput;
  OR?: LocalCredentialWhereInput[] | LocalCredentialWhereInput;
  NOT?: LocalCredentialWhereInput[] | LocalCredentialWhereInput;
}

export interface InviteTokenCreateManyWithoutWorkspaceInput {
  create?:
    | InviteTokenCreateWithoutWorkspaceInput[]
    | InviteTokenCreateWithoutWorkspaceInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
}

export interface ServiceAccountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  apiKey?: String;
  apiKey_not?: String;
  apiKey_in?: String[] | String;
  apiKey_not_in?: String[] | String;
  apiKey_lt?: String;
  apiKey_lte?: String;
  apiKey_gt?: String;
  apiKey_gte?: String;
  apiKey_contains?: String;
  apiKey_not_contains?: String;
  apiKey_starts_with?: String;
  apiKey_not_starts_with?: String;
  apiKey_ends_with?: String;
  apiKey_not_ends_with?: String;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  roleBinding?: RoleBindingWhereInput;
  lastUsedAt?: DateTimeInput;
  lastUsedAt_not?: DateTimeInput;
  lastUsedAt_in?: DateTimeInput[] | DateTimeInput;
  lastUsedAt_not_in?: DateTimeInput[] | DateTimeInput;
  lastUsedAt_lt?: DateTimeInput;
  lastUsedAt_lte?: DateTimeInput;
  lastUsedAt_gt?: DateTimeInput;
  lastUsedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ServiceAccountWhereInput[] | ServiceAccountWhereInput;
  OR?: ServiceAccountWhereInput[] | ServiceAccountWhereInput;
  NOT?: ServiceAccountWhereInput[] | ServiceAccountWhereInput;
}

export interface RoleBindingCreateManyWithoutWorkspaceInput {
  create?:
    | RoleBindingCreateWithoutWorkspaceInput[]
    | RoleBindingCreateWithoutWorkspaceInput;
  connect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
}

export interface InviteTokenWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  workspace?: WorkspaceWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: InviteTokenWhereInput[] | InviteTokenWhereInput;
  OR?: InviteTokenWhereInput[] | InviteTokenWhereInput;
  NOT?: InviteTokenWhereInput[] | InviteTokenWhereInput;
}

export interface UserCreateOneWithoutRoleBindingsInput {
  create?: UserCreateWithoutRoleBindingsInput;
  connect?: UserWhereUniqueInput;
}

export interface DeploymentUpdateManyDataInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentUpdatealertEmailsInput;
}

export interface EmailCreateManyWithoutUserInput {
  create?: EmailCreateWithoutUserInput[] | EmailCreateWithoutUserInput;
  connect?: EmailWhereUniqueInput[] | EmailWhereUniqueInput;
}

export interface WorkspaceUpsertWithoutInvitesInput {
  update: WorkspaceUpdateWithoutInvitesDataInput;
  create: WorkspaceCreateWithoutInvitesInput;
}

export interface InviteTokenCreateManyInput {
  create?: InviteTokenCreateInput[] | InviteTokenCreateInput;
  connect?: InviteTokenWhereUniqueInput[] | InviteTokenWhereUniqueInput;
}

export interface InviteTokenUpsertWithWhereUniqueNestedInput {
  where: InviteTokenWhereUniqueInput;
  update: InviteTokenUpdateDataInput;
  create: InviteTokenCreateInput;
}

export interface WorkspaceCreateOneWithoutInvitesInput {
  create?: WorkspaceCreateWithoutInvitesInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface LocalCredentialUpdateOneWithoutUserInput {
  create?: LocalCredentialCreateWithoutUserInput;
  update?: LocalCredentialUpdateWithoutUserDataInput;
  upsert?: LocalCredentialUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LocalCredentialWhereUniqueInput;
}

export interface DeploymentCreateManyWithoutWorkspaceInput {
  create?:
    | DeploymentCreateWithoutWorkspaceInput[]
    | DeploymentCreateWithoutWorkspaceInput;
  connect?: DeploymentWhereUniqueInput[] | DeploymentWhereUniqueInput;
}

export interface LocalCredentialUpdateWithoutUserDataInput {
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialCreateOneWithoutUserInput {
  create?: LocalCredentialCreateWithoutUserInput;
  connect?: LocalCredentialWhereUniqueInput;
}

export interface LocalCredentialUpsertWithoutUserInput {
  update: LocalCredentialUpdateWithoutUserDataInput;
  create: LocalCredentialCreateWithoutUserInput;
}

export interface OAuthCredentialCreateManyWithoutUserInput {
  create?:
    | OAuthCredentialCreateWithoutUserInput[]
    | OAuthCredentialCreateWithoutUserInput;
  connect?: OAuthCredentialWhereUniqueInput[] | OAuthCredentialWhereUniqueInput;
}

export interface OAuthCredentialUpdateManyWithoutUserInput {
  create?:
    | OAuthCredentialCreateWithoutUserInput[]
    | OAuthCredentialCreateWithoutUserInput;
  delete?: OAuthCredentialWhereUniqueInput[] | OAuthCredentialWhereUniqueInput;
  connect?: OAuthCredentialWhereUniqueInput[] | OAuthCredentialWhereUniqueInput;
  disconnect?:
    | OAuthCredentialWhereUniqueInput[]
    | OAuthCredentialWhereUniqueInput;
  update?:
    | OAuthCredentialUpdateWithWhereUniqueWithoutUserInput[]
    | OAuthCredentialUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | OAuthCredentialUpsertWithWhereUniqueWithoutUserInput[]
    | OAuthCredentialUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?:
    | OAuthCredentialScalarWhereInput[]
    | OAuthCredentialScalarWhereInput;
  updateMany?:
    | OAuthCredentialUpdateManyWithWhereNestedInput[]
    | OAuthCredentialUpdateManyWithWhereNestedInput;
}

export interface ServiceAccountCreateOneWithoutRoleBindingInput {
  create?: ServiceAccountCreateWithoutRoleBindingInput;
  connect?: ServiceAccountWhereUniqueInput;
}

export interface OAuthCredentialUpdateWithWhereUniqueWithoutUserInput {
  where: OAuthCredentialWhereUniqueInput;
  data: OAuthCredentialUpdateWithoutUserDataInput;
}

export interface DeploymentCreateOneInput {
  create?: DeploymentCreateInput;
  connect?: DeploymentWhereUniqueInput;
}

export interface OAuthCredentialUpdateWithoutUserDataInput {
  expiresAt?: DateTimeInput;
  oauthProvider?: String;
  oauthUserId?: String;
}

export interface DeploymentUpdatealertEmailsInput {
  set?: String[] | String;
}

export interface OAuthCredentialUpsertWithWhereUniqueWithoutUserInput {
  where: OAuthCredentialWhereUniqueInput;
  update: OAuthCredentialUpdateWithoutUserDataInput;
  create: OAuthCredentialCreateWithoutUserInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface OAuthCredentialScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  expiresAt?: DateTimeInput;
  expiresAt_not?: DateTimeInput;
  expiresAt_in?: DateTimeInput[] | DateTimeInput;
  expiresAt_not_in?: DateTimeInput[] | DateTimeInput;
  expiresAt_lt?: DateTimeInput;
  expiresAt_lte?: DateTimeInput;
  expiresAt_gt?: DateTimeInput;
  expiresAt_gte?: DateTimeInput;
  oauthProvider?: String;
  oauthProvider_not?: String;
  oauthProvider_in?: String[] | String;
  oauthProvider_not_in?: String[] | String;
  oauthProvider_lt?: String;
  oauthProvider_lte?: String;
  oauthProvider_gt?: String;
  oauthProvider_gte?: String;
  oauthProvider_contains?: String;
  oauthProvider_not_contains?: String;
  oauthProvider_starts_with?: String;
  oauthProvider_not_starts_with?: String;
  oauthProvider_ends_with?: String;
  oauthProvider_not_ends_with?: String;
  oauthUserId?: String;
  oauthUserId_not?: String;
  oauthUserId_in?: String[] | String;
  oauthUserId_not_in?: String[] | String;
  oauthUserId_lt?: String;
  oauthUserId_lte?: String;
  oauthUserId_gt?: String;
  oauthUserId_gte?: String;
  oauthUserId_contains?: String;
  oauthUserId_not_contains?: String;
  oauthUserId_starts_with?: String;
  oauthUserId_not_starts_with?: String;
  oauthUserId_ends_with?: String;
  oauthUserId_not_ends_with?: String;
  AND?: OAuthCredentialScalarWhereInput[] | OAuthCredentialScalarWhereInput;
  OR?: OAuthCredentialScalarWhereInput[] | OAuthCredentialScalarWhereInput;
  NOT?: OAuthCredentialScalarWhereInput[] | OAuthCredentialScalarWhereInput;
}

export interface OAuthCredentialSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OAuthCredentialWhereInput;
  AND?:
    | OAuthCredentialSubscriptionWhereInput[]
    | OAuthCredentialSubscriptionWhereInput;
  OR?:
    | OAuthCredentialSubscriptionWhereInput[]
    | OAuthCredentialSubscriptionWhereInput;
  NOT?:
    | OAuthCredentialSubscriptionWhereInput[]
    | OAuthCredentialSubscriptionWhereInput;
}

export interface OAuthCredentialUpdateManyWithWhereNestedInput {
  where: OAuthCredentialScalarWhereInput;
  data: OAuthCredentialUpdateManyDataInput;
}

export interface DeploymentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeploymentWhereInput;
  AND?: DeploymentSubscriptionWhereInput[] | DeploymentSubscriptionWhereInput;
  OR?: DeploymentSubscriptionWhereInput[] | DeploymentSubscriptionWhereInput;
  NOT?: DeploymentSubscriptionWhereInput[] | DeploymentSubscriptionWhereInput;
}

export interface OAuthCredentialUpdateManyDataInput {
  expiresAt?: DateTimeInput;
  oauthProvider?: String;
  oauthUserId?: String;
}

export type EmailWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  address?: String;
  token?: String;
}>;

export interface UserUpsertWithoutRoleBindingsInput {
  update: UserUpdateWithoutRoleBindingsDataInput;
  create: UserCreateWithoutRoleBindingsInput;
}

export type InviteTokenWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ServiceAccountUpdateOneWithoutRoleBindingInput {
  create?: ServiceAccountCreateWithoutRoleBindingInput;
  update?: ServiceAccountUpdateWithoutRoleBindingDataInput;
  upsert?: ServiceAccountUpsertWithoutRoleBindingInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ServiceAccountWhereUniqueInput;
}

export type LocalCredentialWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  password?: String;
}>;

export interface ServiceAccountUpdateWithoutRoleBindingDataInput {
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  lastUsedAt?: DateTimeInput;
}

export interface RoleBindingCreateOneWithoutServiceAccountInput {
  create?: RoleBindingCreateWithoutServiceAccountInput;
  connect?: RoleBindingWhereUniqueInput;
}

export interface ServiceAccountUpsertWithoutRoleBindingInput {
  update: ServiceAccountUpdateWithoutRoleBindingDataInput;
  create: ServiceAccountCreateWithoutRoleBindingInput;
}

export interface RoleBindingUpdateInput {
  role?: Role;
  user?: UserUpdateOneWithoutRoleBindingsInput;
  serviceAccount?: ServiceAccountUpdateOneWithoutRoleBindingInput;
  workspace?: WorkspaceUpdateOneWithoutRoleBindingsInput;
  deployment?: DeploymentUpdateOneInput;
}

export interface DeploymentUpdateOneInput {
  create?: DeploymentCreateInput;
  update?: DeploymentUpdateDataInput;
  upsert?: DeploymentUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DeploymentWhereUniqueInput;
}

export interface UserUpsertWithoutOauthCredentialsInput {
  update: UserUpdateWithoutOauthCredentialsDataInput;
  create: UserCreateWithoutOauthCredentialsInput;
}

export interface DeploymentUpdateDataInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentUpdatealertEmailsInput;
  workspace?: WorkspaceUpdateOneWithoutDeploymentsInput;
}

export interface OAuthCredentialUpdateInput {
  expiresAt?: DateTimeInput;
  oauthProvider?: String;
  oauthUserId?: String;
  user?: UserUpdateOneWithoutOauthCredentialsInput;
}

export interface DeploymentUpsertNestedInput {
  update: DeploymentUpdateDataInput;
  create: DeploymentCreateInput;
}

export interface OAuthCredentialCreateInput {
  expiresAt?: DateTimeInput;
  oauthProvider: String;
  oauthUserId: String;
  user?: UserCreateOneWithoutOauthCredentialsInput;
}

export interface RoleBindingUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: RoleBindingWhereUniqueInput;
  update: RoleBindingUpdateWithoutWorkspaceDataInput;
  create: RoleBindingCreateWithoutWorkspaceInput;
}

export interface UserUpdateWithoutLocalCredentialDataInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutUserInput;
  inviteTokens?: InviteTokenUpdateManyInput;
  oauthCredentials?: OAuthCredentialUpdateManyWithoutUserInput;
}

export interface RoleBindingScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  AND?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  OR?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  NOT?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
}

export interface WorkspaceCreateWithoutDeploymentsInput {
  active?: Boolean;
  description?: String;
  invites?: InviteTokenCreateManyWithoutWorkspaceInput;
  label?: String;
  roleBindings?: RoleBindingCreateManyWithoutWorkspaceInput;
}

export interface RoleBindingUpdateManyWithWhereNestedInput {
  where: RoleBindingScalarWhereInput;
  data: RoleBindingUpdateManyDataInput;
}

export interface RoleBindingCreateWithoutWorkspaceInput {
  role?: Role;
  user?: UserCreateOneWithoutRoleBindingsInput;
  serviceAccount?: ServiceAccountCreateOneWithoutRoleBindingInput;
  deployment?: DeploymentCreateOneInput;
}

export interface RoleBindingUpdateManyDataInput {
  role?: Role;
}

export interface EmailCreateWithoutUserInput {
  address?: String;
  primary?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface WorkspaceUpsertWithoutDeploymentsInput {
  update: WorkspaceUpdateWithoutDeploymentsDataInput;
  create: WorkspaceCreateWithoutDeploymentsInput;
}

export interface WorkspaceCreateWithoutInvitesInput {
  active?: Boolean;
  deployments?: DeploymentCreateManyWithoutWorkspaceInput;
  description?: String;
  label?: String;
  roleBindings?: RoleBindingCreateManyWithoutWorkspaceInput;
}

export interface DeploymentUpdateManyMutationInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentUpdatealertEmailsInput;
}

export interface LocalCredentialCreateWithoutUserInput {
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialCreateInput {
  user?: UserCreateOneWithoutLocalCredentialInput;
  password?: String;
  resetToken?: String;
}

export interface ServiceAccountCreateWithoutRoleBindingInput {
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  lastUsedAt?: DateTimeInput;
}

export interface InviteTokenUpdateManyMutationInput {
  email?: String;
  token?: String;
}

export interface WorkspaceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkspaceWhereInput;
  AND?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
  OR?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
  NOT?: WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput;
}

export interface EmailCreateInput {
  address?: String;
  primary?: Boolean;
  token?: String;
  user?: UserCreateOneWithoutEmailsInput;
  verified?: Boolean;
}

export interface InviteTokenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InviteTokenWhereInput;
  AND?: InviteTokenSubscriptionWhereInput[] | InviteTokenSubscriptionWhereInput;
  OR?: InviteTokenSubscriptionWhereInput[] | InviteTokenSubscriptionWhereInput;
  NOT?: InviteTokenSubscriptionWhereInput[] | InviteTokenSubscriptionWhereInput;
}

export interface UserCreateOneWithoutEmailsInput {
  create?: UserCreateWithoutEmailsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutUserInput;
  inviteTokens?: InviteTokenUpdateManyInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  oauthCredentials?: OAuthCredentialUpdateManyWithoutUserInput;
}

export interface UserCreateWithoutEmailsInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  roleBindings?: RoleBindingCreateManyWithoutUserInput;
  inviteTokens?: InviteTokenCreateManyInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
  oauthCredentials?: OAuthCredentialCreateManyWithoutUserInput;
}

export interface ServiceAccountUpdateInput {
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  roleBinding?: RoleBindingUpdateOneWithoutServiceAccountInput;
  lastUsedAt?: DateTimeInput;
}

export interface RoleBindingCreateManyWithoutUserInput {
  create?:
    | RoleBindingCreateWithoutUserInput[]
    | RoleBindingCreateWithoutUserInput;
  connect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
}

export interface RoleBindingCreateInput {
  role?: Role;
  user?: UserCreateOneWithoutRoleBindingsInput;
  serviceAccount?: ServiceAccountCreateOneWithoutRoleBindingInput;
  workspace?: WorkspaceCreateOneWithoutRoleBindingsInput;
  deployment?: DeploymentCreateOneInput;
}

export interface RoleBindingCreateWithoutUserInput {
  role?: Role;
  serviceAccount?: ServiceAccountCreateOneWithoutRoleBindingInput;
  workspace?: WorkspaceCreateOneWithoutRoleBindingsInput;
  deployment?: DeploymentCreateOneInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface WorkspaceCreateOneWithoutRoleBindingsInput {
  create?: WorkspaceCreateWithoutRoleBindingsInput;
  connect?: WorkspaceWhereUniqueInput;
}

export interface LocalCredentialUpdateInput {
  user?: UserUpdateOneWithoutLocalCredentialInput;
  password?: String;
  resetToken?: String;
}

export interface WorkspaceCreateWithoutRoleBindingsInput {
  active?: Boolean;
  deployments?: DeploymentCreateManyWithoutWorkspaceInput;
  description?: String;
  invites?: InviteTokenCreateManyWithoutWorkspaceInput;
  label?: String;
}

export interface InviteTokenCreateWithoutWorkspaceInput {
  email?: String;
  token?: String;
}

export interface EmailUpdateInput {
  address?: String;
  primary?: Boolean;
  token?: String;
  user?: UserUpdateOneWithoutEmailsInput;
  verified?: Boolean;
}

export interface InviteTokenCreateInput {
  email?: String;
  token?: String;
  workspace?: WorkspaceCreateOneWithoutInvitesInput;
}

export interface UserUpdateOneWithoutEmailsInput {
  create?: UserCreateWithoutEmailsInput;
  update?: UserUpdateWithoutEmailsDataInput;
  upsert?: UserUpsertWithoutEmailsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface OAuthCredentialCreateWithoutUserInput {
  expiresAt?: DateTimeInput;
  oauthProvider: String;
  oauthUserId: String;
}

export interface UserUpdateWithoutEmailsDataInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  roleBindings?: RoleBindingUpdateManyWithoutUserInput;
  inviteTokens?: InviteTokenUpdateManyInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
  oauthCredentials?: OAuthCredentialUpdateManyWithoutUserInput;
}

export interface DeploymentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  registryPassword?: String;
  registryPassword_not?: String;
  registryPassword_in?: String[] | String;
  registryPassword_not_in?: String[] | String;
  registryPassword_lt?: String;
  registryPassword_lte?: String;
  registryPassword_gt?: String;
  registryPassword_gte?: String;
  registryPassword_contains?: String;
  registryPassword_not_contains?: String;
  registryPassword_starts_with?: String;
  registryPassword_not_starts_with?: String;
  registryPassword_ends_with?: String;
  registryPassword_not_ends_with?: String;
  releaseName?: String;
  releaseName_not?: String;
  releaseName_in?: String[] | String;
  releaseName_not_in?: String[] | String;
  releaseName_lt?: String;
  releaseName_lte?: String;
  releaseName_gt?: String;
  releaseName_gte?: String;
  releaseName_contains?: String;
  releaseName_not_contains?: String;
  releaseName_starts_with?: String;
  releaseName_not_starts_with?: String;
  releaseName_ends_with?: String;
  releaseName_not_ends_with?: String;
  version?: String;
  version_not?: String;
  version_in?: String[] | String;
  version_not_in?: String[] | String;
  version_lt?: String;
  version_lte?: String;
  version_gt?: String;
  version_gte?: String;
  version_contains?: String;
  version_not_contains?: String;
  version_starts_with?: String;
  version_not_starts_with?: String;
  version_ends_with?: String;
  version_not_ends_with?: String;
  extraAu?: Int;
  extraAu_not?: Int;
  extraAu_in?: Int[] | Int;
  extraAu_not_in?: Int[] | Int;
  extraAu_lt?: Int;
  extraAu_lte?: Int;
  extraAu_gt?: Int;
  extraAu_gte?: Int;
  airflowVersion?: String;
  airflowVersion_not?: String;
  airflowVersion_in?: String[] | String;
  airflowVersion_not_in?: String[] | String;
  airflowVersion_lt?: String;
  airflowVersion_lte?: String;
  airflowVersion_gt?: String;
  airflowVersion_gte?: String;
  airflowVersion_contains?: String;
  airflowVersion_not_contains?: String;
  airflowVersion_starts_with?: String;
  airflowVersion_not_starts_with?: String;
  airflowVersion_ends_with?: String;
  airflowVersion_not_ends_with?: String;
  workspace?: WorkspaceWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DeploymentWhereInput[] | DeploymentWhereInput;
  OR?: DeploymentWhereInput[] | DeploymentWhereInput;
  NOT?: DeploymentWhereInput[] | DeploymentWhereInput;
}

export interface RoleBindingUpdateManyWithoutUserInput {
  create?:
    | RoleBindingCreateWithoutUserInput[]
    | RoleBindingCreateWithoutUserInput;
  delete?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  connect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  disconnect?: RoleBindingWhereUniqueInput[] | RoleBindingWhereUniqueInput;
  update?:
    | RoleBindingUpdateWithWhereUniqueWithoutUserInput[]
    | RoleBindingUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | RoleBindingUpsertWithWhereUniqueWithoutUserInput[]
    | RoleBindingUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: RoleBindingScalarWhereInput[] | RoleBindingScalarWhereInput;
  updateMany?:
    | RoleBindingUpdateManyWithWhereNestedInput[]
    | RoleBindingUpdateManyWithWhereNestedInput;
}

export interface RoleBindingUpsertWithoutServiceAccountInput {
  update: RoleBindingUpdateWithoutServiceAccountDataInput;
  create: RoleBindingCreateWithoutServiceAccountInput;
}

export interface RoleBindingUpdateWithWhereUniqueWithoutUserInput {
  where: RoleBindingWhereUniqueInput;
  data: RoleBindingUpdateWithoutUserDataInput;
}

export interface UserUpdateWithoutOauthCredentialsDataInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailUpdateManyWithoutUserInput;
  roleBindings?: RoleBindingUpdateManyWithoutUserInput;
  inviteTokens?: InviteTokenUpdateManyInput;
  localCredential?: LocalCredentialUpdateOneWithoutUserInput;
}

export interface RoleBindingUpdateWithoutUserDataInput {
  role?: Role;
  serviceAccount?: ServiceAccountUpdateOneWithoutRoleBindingInput;
  workspace?: WorkspaceUpdateOneWithoutRoleBindingsInput;
  deployment?: DeploymentUpdateOneInput;
}

export interface DeploymentCreatealertEmailsInput {
  set?: String[] | String;
}

export interface WorkspaceUpdateOneWithoutRoleBindingsInput {
  create?: WorkspaceCreateWithoutRoleBindingsInput;
  update?: WorkspaceUpdateWithoutRoleBindingsDataInput;
  upsert?: WorkspaceUpsertWithoutRoleBindingsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WorkspaceWhereUniqueInput;
}

export interface DeploymentCreateWithoutWorkspaceInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentCreatealertEmailsInput;
}

export interface WorkspaceUpdateWithoutRoleBindingsDataInput {
  active?: Boolean;
  deployments?: DeploymentUpdateManyWithoutWorkspaceInput;
  description?: String;
  invites?: InviteTokenUpdateManyWithoutWorkspaceInput;
  label?: String;
}

export interface WorkspaceUpdateInput {
  active?: Boolean;
  deployments?: DeploymentUpdateManyWithoutWorkspaceInput;
  description?: String;
  invites?: InviteTokenUpdateManyWithoutWorkspaceInput;
  label?: String;
  roleBindings?: RoleBindingUpdateManyWithoutWorkspaceInput;
}

export interface EmailUpdateManyMutationInput {
  address?: String;
  primary?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface UserUpsertWithoutEmailsInput {
  update: UserUpdateWithoutEmailsDataInput;
  create: UserCreateWithoutEmailsInput;
}

export interface RoleBindingUpsertWithWhereUniqueWithoutUserInput {
  where: RoleBindingWhereUniqueInput;
  update: RoleBindingUpdateWithoutUserDataInput;
  create: RoleBindingCreateWithoutUserInput;
}

export interface WorkspaceUpsertWithoutRoleBindingsInput {
  update: WorkspaceUpdateWithoutRoleBindingsDataInput;
  create: WorkspaceCreateWithoutRoleBindingsInput;
}

export interface ServiceAccountCreateInput {
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  roleBinding?: RoleBindingCreateOneWithoutServiceAccountInput;
  lastUsedAt?: DateTimeInput;
}

export interface DeploymentUpdateInput {
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails?: DeploymentUpdatealertEmailsInput;
  workspace?: WorkspaceUpdateOneWithoutDeploymentsInput;
}

export interface UserCreateWithoutRoleBindingsInput {
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  emails?: EmailCreateManyWithoutUserInput;
  inviteTokens?: InviteTokenCreateManyInput;
  localCredential?: LocalCredentialCreateOneWithoutUserInput;
  oauthCredentials?: OAuthCredentialCreateManyWithoutUserInput;
}

export interface UserUpsertWithoutLocalCredentialInput {
  update: UserUpdateWithoutLocalCredentialDataInput;
  create: UserCreateWithoutLocalCredentialInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WorkspacePreviousValues {
  id: ID_Output;
  active?: Boolean;
  description?: String;
  label?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkspacePreviousValuesPromise
  extends Promise<WorkspacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  active: () => Promise<Boolean>;
  description: () => Promise<String>;
  label: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspacePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateEmail {
  count: Int;
}

export interface AggregateEmailPromise
  extends Promise<AggregateEmail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscription
  extends Promise<AsyncIterator<AggregateEmail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceAccountPreviousValues {
  id: ID_Output;
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  lastUsedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ServiceAccountPreviousValuesPromise
  extends Promise<ServiceAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  apiKey: () => Promise<String>;
  label: () => Promise<String>;
  category: () => Promise<String>;
  active: () => Promise<Boolean>;
  lastUsedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ServiceAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  apiKey: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  lastUsedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EmailEdge {
  node: Email;
  cursor: String;
}

export interface EmailEdgePromise extends Promise<EmailEdge>, Fragmentable {
  node: <T = EmailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailEdgeSubscription
  extends Promise<AsyncIterator<EmailEdge>>,
    Fragmentable {
  node: <T = EmailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeployment {
  count: Int;
}

export interface AggregateDeploymentPromise
  extends Promise<AggregateDeployment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeploymentSubscription
  extends Promise<AsyncIterator<AggregateDeployment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailConnection {
  pageInfo: PageInfo;
  edges: EmailEdge[];
}

export interface EmailConnectionPromise
  extends Promise<EmailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailEdge>>() => T;
  aggregate: <T = AggregateEmailPromise>() => T;
}

export interface EmailConnectionSubscription
  extends Promise<AsyncIterator<EmailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscription>() => T;
}

export interface AggregateWorkspace {
  count: Int;
}

export interface AggregateWorkspacePromise
  extends Promise<AggregateWorkspace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspaceSubscription
  extends Promise<AsyncIterator<AggregateWorkspace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WorkspaceConnection {
  pageInfo: PageInfo;
  edges: WorkspaceEdge[];
}

export interface WorkspaceConnectionPromise
  extends Promise<WorkspaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspaceEdge>>() => T;
  aggregate: <T = AggregateWorkspacePromise>() => T;
}

export interface WorkspaceConnectionSubscription
  extends Promise<AsyncIterator<WorkspaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkspaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkspaceSubscription>() => T;
}

export interface DeploymentEdge {
  node: Deployment;
  cursor: String;
}

export interface DeploymentEdgePromise
  extends Promise<DeploymentEdge>,
    Fragmentable {
  node: <T = DeploymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeploymentEdgeSubscription
  extends Promise<AsyncIterator<DeploymentEdge>>,
    Fragmentable {
  node: <T = DeploymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DeploymentConnection {
  pageInfo: PageInfo;
  edges: DeploymentEdge[];
}

export interface DeploymentConnectionPromise
  extends Promise<DeploymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeploymentEdge>>() => T;
  aggregate: <T = AggregateDeploymentPromise>() => T;
}

export interface DeploymentConnectionSubscription
  extends Promise<AsyncIterator<DeploymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeploymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeploymentSubscription>() => T;
}

export interface AggregateServiceAccount {
  count: Int;
}

export interface AggregateServiceAccountPromise
  extends Promise<AggregateServiceAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceAccountSubscription
  extends Promise<AsyncIterator<AggregateServiceAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ServiceAccountConnection {
  pageInfo: PageInfo;
  edges: ServiceAccountEdge[];
}

export interface ServiceAccountConnectionPromise
  extends Promise<ServiceAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceAccountEdge>>() => T;
  aggregate: <T = AggregateServiceAccountPromise>() => T;
}

export interface ServiceAccountConnectionSubscription
  extends Promise<AsyncIterator<ServiceAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceAccountSubscription>() => T;
}

export interface DeploymentSubscriptionPayload {
  mutation: MutationType;
  node: Deployment;
  updatedFields: String[];
  previousValues: DeploymentPreviousValues;
}

export interface DeploymentSubscriptionPayloadPromise
  extends Promise<DeploymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeploymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeploymentPreviousValuesPromise>() => T;
}

export interface DeploymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeploymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeploymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeploymentPreviousValuesSubscription>() => T;
}

export interface AggregateRoleBinding {
  count: Int;
}

export interface AggregateRoleBindingPromise
  extends Promise<AggregateRoleBinding>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleBindingSubscription
  extends Promise<AsyncIterator<AggregateRoleBinding>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeploymentPreviousValues {
  id: ID_Output;
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DeploymentPreviousValuesPromise
  extends Promise<DeploymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  config: () => Promise<Json>;
  description: () => Promise<String>;
  label: () => Promise<String>;
  registryPassword: () => Promise<String>;
  releaseName: () => Promise<String>;
  version: () => Promise<String>;
  extraAu: () => Promise<Int>;
  airflowVersion: () => Promise<String>;
  alertEmails: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeploymentPreviousValuesSubscription
  extends Promise<AsyncIterator<DeploymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  config: () => Promise<AsyncIterator<Json>>;
  description: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  registryPassword: () => Promise<AsyncIterator<String>>;
  releaseName: () => Promise<AsyncIterator<String>>;
  version: () => Promise<AsyncIterator<String>>;
  extraAu: () => Promise<AsyncIterator<Int>>;
  airflowVersion: () => Promise<AsyncIterator<String>>;
  alertEmails: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleBindingConnection {
  pageInfo: PageInfo;
  edges: RoleBindingEdge[];
}

export interface RoleBindingConnectionPromise
  extends Promise<RoleBindingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleBindingEdge>>() => T;
  aggregate: <T = AggregateRoleBindingPromise>() => T;
}

export interface RoleBindingConnectionSubscription
  extends Promise<AsyncIterator<RoleBindingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleBindingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleBindingSubscription>() => T;
}

export interface ServiceAccount {
  id: ID_Output;
  apiKey?: String;
  label?: String;
  category?: String;
  active?: Boolean;
  lastUsedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ServiceAccountPromise
  extends Promise<ServiceAccount>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  apiKey: () => Promise<String>;
  label: () => Promise<String>;
  category: () => Promise<String>;
  active: () => Promise<Boolean>;
  roleBinding: <T = RoleBindingPromise>() => T;
  lastUsedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ServiceAccountSubscription
  extends Promise<AsyncIterator<ServiceAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  apiKey: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  roleBinding: <T = RoleBindingSubscription>() => T;
  lastUsedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OAuthCredentialEdge {
  node: OAuthCredential;
  cursor: String;
}

export interface OAuthCredentialEdgePromise
  extends Promise<OAuthCredentialEdge>,
    Fragmentable {
  node: <T = OAuthCredentialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OAuthCredentialEdgeSubscription
  extends Promise<AsyncIterator<OAuthCredentialEdge>>,
    Fragmentable {
  node: <T = OAuthCredentialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriptionPayload {
  mutation: MutationType;
  node: Email;
  updatedFields: String[];
  previousValues: EmailPreviousValues;
}

export interface EmailSubscriptionPayloadPromise
  extends Promise<EmailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailPreviousValuesPromise>() => T;
}

export interface EmailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailPreviousValuesSubscription>() => T;
}

export interface AggregateLocalCredential {
  count: Int;
}

export interface AggregateLocalCredentialPromise
  extends Promise<AggregateLocalCredential>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocalCredentialSubscription
  extends Promise<AsyncIterator<AggregateLocalCredential>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailPreviousValues {
  id: ID_Output;
  address?: String;
  primary?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface EmailPreviousValuesPromise
  extends Promise<EmailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  primary: () => Promise<Boolean>;
  token: () => Promise<String>;
  verified: () => Promise<Boolean>;
}

export interface EmailPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  primary: () => Promise<AsyncIterator<Boolean>>;
  token: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

export interface LocalCredentialConnection {
  pageInfo: PageInfo;
  edges: LocalCredentialEdge[];
}

export interface LocalCredentialConnectionPromise
  extends Promise<LocalCredentialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocalCredentialEdge>>() => T;
  aggregate: <T = AggregateLocalCredentialPromise>() => T;
}

export interface LocalCredentialConnectionSubscription
  extends Promise<AsyncIterator<LocalCredentialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocalCredentialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocalCredentialSubscription>() => T;
}

export interface OAuthCredential {
  id: ID_Output;
  expiresAt?: DateTimeOutput;
  oauthProvider: String;
  oauthUserId: String;
}

export interface OAuthCredentialPromise
  extends Promise<OAuthCredential>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  expiresAt: () => Promise<DateTimeOutput>;
  oauthProvider: () => Promise<String>;
  oauthUserId: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface OAuthCredentialSubscription
  extends Promise<AsyncIterator<OAuthCredential>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  expiresAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  oauthProvider: () => Promise<AsyncIterator<String>>;
  oauthUserId: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AggregateInviteToken {
  count: Int;
}

export interface AggregateInviteTokenPromise
  extends Promise<AggregateInviteToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInviteTokenSubscription
  extends Promise<AsyncIterator<AggregateInviteToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InviteTokenSubscriptionPayload {
  mutation: MutationType;
  node: InviteToken;
  updatedFields: String[];
  previousValues: InviteTokenPreviousValues;
}

export interface InviteTokenSubscriptionPayloadPromise
  extends Promise<InviteTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InviteTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InviteTokenPreviousValuesPromise>() => T;
}

export interface InviteTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InviteTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InviteTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InviteTokenPreviousValuesSubscription>() => T;
}

export interface InviteTokenConnection {
  pageInfo: PageInfo;
  edges: InviteTokenEdge[];
}

export interface InviteTokenConnectionPromise
  extends Promise<InviteTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InviteTokenEdge>>() => T;
  aggregate: <T = AggregateInviteTokenPromise>() => T;
}

export interface InviteTokenConnectionSubscription
  extends Promise<AsyncIterator<InviteTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InviteTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInviteTokenSubscription>() => T;
}

export interface InviteTokenPreviousValues {
  id: ID_Output;
  email?: String;
  token?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InviteTokenPreviousValuesPromise
  extends Promise<InviteTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InviteTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<InviteTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkspaceEdge {
  node: Workspace;
  cursor: String;
}

export interface WorkspaceEdgePromise
  extends Promise<WorkspaceEdge>,
    Fragmentable {
  node: <T = WorkspacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspaceEdgeSubscription
  extends Promise<AsyncIterator<WorkspaceEdge>>,
    Fragmentable {
  node: <T = WorkspaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleBinding {
  id: ID_Output;
  role?: Role;
}

export interface RoleBindingPromise extends Promise<RoleBinding>, Fragmentable {
  id: () => Promise<ID_Output>;
  role: () => Promise<Role>;
  user: <T = UserPromise>() => T;
  serviceAccount: <T = ServiceAccountPromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
  deployment: <T = DeploymentPromise>() => T;
}

export interface RoleBindingSubscription
  extends Promise<AsyncIterator<RoleBinding>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: () => Promise<AsyncIterator<Role>>;
  user: <T = UserSubscription>() => T;
  serviceAccount: <T = ServiceAccountSubscription>() => T;
  workspace: <T = WorkspaceSubscription>() => T;
  deployment: <T = DeploymentSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocalCredentialSubscriptionPayload {
  mutation: MutationType;
  node: LocalCredential;
  updatedFields: String[];
  previousValues: LocalCredentialPreviousValues;
}

export interface LocalCredentialSubscriptionPayloadPromise
  extends Promise<LocalCredentialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocalCredentialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocalCredentialPreviousValuesPromise>() => T;
}

export interface LocalCredentialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocalCredentialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocalCredentialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocalCredentialPreviousValuesSubscription>() => T;
}

export interface ServiceAccountEdge {
  node: ServiceAccount;
  cursor: String;
}

export interface ServiceAccountEdgePromise
  extends Promise<ServiceAccountEdge>,
    Fragmentable {
  node: <T = ServiceAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceAccountEdgeSubscription
  extends Promise<AsyncIterator<ServiceAccountEdge>>,
    Fragmentable {
  node: <T = ServiceAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocalCredentialPreviousValues {
  id: ID_Output;
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialPreviousValuesPromise
  extends Promise<LocalCredentialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
}

export interface LocalCredentialPreviousValuesSubscription
  extends Promise<AsyncIterator<LocalCredentialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
}

export interface RoleBindingEdge {
  node: RoleBinding;
  cursor: String;
}

export interface RoleBindingEdgePromise
  extends Promise<RoleBindingEdge>,
    Fragmentable {
  node: <T = RoleBindingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleBindingEdgeSubscription
  extends Promise<AsyncIterator<RoleBindingEdge>>,
    Fragmentable {
  node: <T = RoleBindingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocalCredential {
  id: ID_Output;
  password?: String;
  resetToken?: String;
}

export interface LocalCredentialPromise
  extends Promise<LocalCredential>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
}

export interface LocalCredentialSubscription
  extends Promise<AsyncIterator<LocalCredential>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
}

export interface OAuthCredentialConnection {
  pageInfo: PageInfo;
  edges: OAuthCredentialEdge[];
}

export interface OAuthCredentialConnectionPromise
  extends Promise<OAuthCredentialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OAuthCredentialEdge>>() => T;
  aggregate: <T = AggregateOAuthCredentialPromise>() => T;
}

export interface OAuthCredentialConnectionSubscription
  extends Promise<AsyncIterator<OAuthCredentialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OAuthCredentialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOAuthCredentialSubscription>() => T;
}

export interface OAuthCredentialSubscriptionPayload {
  mutation: MutationType;
  node: OAuthCredential;
  updatedFields: String[];
  previousValues: OAuthCredentialPreviousValues;
}

export interface OAuthCredentialSubscriptionPayloadPromise
  extends Promise<OAuthCredentialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OAuthCredentialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OAuthCredentialPreviousValuesPromise>() => T;
}

export interface OAuthCredentialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OAuthCredentialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OAuthCredentialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OAuthCredentialPreviousValuesSubscription>() => T;
}

export interface Workspace {
  id: ID_Output;
  active?: Boolean;
  description?: String;
  label?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkspacePromise extends Promise<Workspace>, Fragmentable {
  id: () => Promise<ID_Output>;
  active: () => Promise<Boolean>;
  deployments: <T = FragmentableArray<Deployment>>(
    args?: {
      where?: DeploymentWhereInput;
      orderBy?: DeploymentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<String>;
  invites: <T = FragmentableArray<InviteToken>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  label: () => Promise<String>;
  roleBindings: <T = FragmentableArray<RoleBinding>>(
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspaceSubscription
  extends Promise<AsyncIterator<Workspace>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  deployments: <T = Promise<AsyncIterator<DeploymentSubscription>>>(
    args?: {
      where?: DeploymentWhereInput;
      orderBy?: DeploymentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<AsyncIterator<String>>;
  invites: <T = Promise<AsyncIterator<InviteTokenSubscription>>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  label: () => Promise<AsyncIterator<String>>;
  roleBindings: <T = Promise<AsyncIterator<RoleBindingSubscription>>>(
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OAuthCredentialPreviousValues {
  id: ID_Output;
  expiresAt?: DateTimeOutput;
  oauthProvider: String;
  oauthUserId: String;
}

export interface OAuthCredentialPreviousValuesPromise
  extends Promise<OAuthCredentialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  expiresAt: () => Promise<DateTimeOutput>;
  oauthProvider: () => Promise<String>;
  oauthUserId: () => Promise<String>;
}

export interface OAuthCredentialPreviousValuesSubscription
  extends Promise<AsyncIterator<OAuthCredentialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  expiresAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  oauthProvider: () => Promise<AsyncIterator<String>>;
  oauthUserId: () => Promise<AsyncIterator<String>>;
}

export interface WorkspaceSubscriptionPayload {
  mutation: MutationType;
  node: Workspace;
  updatedFields: String[];
  previousValues: WorkspacePreviousValues;
}

export interface WorkspaceSubscriptionPayloadPromise
  extends Promise<WorkspaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspacePreviousValuesPromise>() => T;
}

export interface WorkspaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspacePreviousValuesSubscription>() => T;
}

export interface Email {
  id: ID_Output;
  address?: String;
  primary?: Boolean;
  token?: String;
  verified?: Boolean;
}

export interface EmailPromise extends Promise<Email>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  primary: () => Promise<Boolean>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
  verified: () => Promise<Boolean>;
}

export interface EmailSubscription
  extends Promise<AsyncIterator<Email>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  primary: () => Promise<AsyncIterator<Boolean>>;
  token: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

export interface InviteToken {
  id: ID_Output;
  email?: String;
  token?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InviteTokenPromise extends Promise<InviteToken>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  token: () => Promise<String>;
  workspace: <T = WorkspacePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InviteTokenSubscription
  extends Promise<AsyncIterator<InviteToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  workspace: <T = WorkspaceSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateOAuthCredential {
  count: Int;
}

export interface AggregateOAuthCredentialPromise
  extends Promise<AggregateOAuthCredential>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOAuthCredentialSubscription
  extends Promise<AsyncIterator<AggregateOAuthCredential>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceAccountSubscriptionPayload {
  mutation: MutationType;
  node: ServiceAccount;
  updatedFields: String[];
  previousValues: ServiceAccountPreviousValues;
}

export interface ServiceAccountSubscriptionPayloadPromise
  extends Promise<ServiceAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceAccountPreviousValuesPromise>() => T;
}

export interface ServiceAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceAccountPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  status: () => Promise<String>;
  fullName: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  emails: <T = FragmentableArray<Email>>(
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  roleBindings: <T = FragmentableArray<RoleBinding>>(
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inviteTokens: <T = FragmentableArray<InviteToken>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  localCredential: <T = LocalCredentialPromise>() => T;
  oauthCredentials: <T = FragmentableArray<OAuthCredential>>(
    args?: {
      where?: OAuthCredentialWhereInput;
      orderBy?: OAuthCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  emails: <T = Promise<AsyncIterator<EmailSubscription>>>(
    args?: {
      where?: EmailWhereInput;
      orderBy?: EmailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  roleBindings: <T = Promise<AsyncIterator<RoleBindingSubscription>>>(
    args?: {
      where?: RoleBindingWhereInput;
      orderBy?: RoleBindingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  inviteTokens: <T = Promise<AsyncIterator<InviteTokenSubscription>>>(
    args?: {
      where?: InviteTokenWhereInput;
      orderBy?: InviteTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  localCredential: <T = LocalCredentialSubscription>() => T;
  oauthCredentials: <T = Promise<AsyncIterator<OAuthCredentialSubscription>>>(
    args?: {
      where?: OAuthCredentialWhereInput;
      orderBy?: OAuthCredentialOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleBindingPreviousValues {
  id: ID_Output;
  role?: Role;
}

export interface RoleBindingPreviousValuesPromise
  extends Promise<RoleBindingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  role: () => Promise<Role>;
}

export interface RoleBindingPreviousValuesSubscription
  extends Promise<AsyncIterator<RoleBindingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface RoleBindingSubscriptionPayload {
  mutation: MutationType;
  node: RoleBinding;
  updatedFields: String[];
  previousValues: RoleBindingPreviousValues;
}

export interface RoleBindingSubscriptionPayloadPromise
  extends Promise<RoleBindingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoleBindingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoleBindingPreviousValuesPromise>() => T;
}

export interface RoleBindingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleBindingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleBindingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoleBindingPreviousValuesSubscription>() => T;
}

export interface LocalCredentialEdge {
  node: LocalCredential;
  cursor: String;
}

export interface LocalCredentialEdgePromise
  extends Promise<LocalCredentialEdge>,
    Fragmentable {
  node: <T = LocalCredentialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocalCredentialEdgeSubscription
  extends Promise<AsyncIterator<LocalCredentialEdge>>,
    Fragmentable {
  node: <T = LocalCredentialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  username?: String;
  status?: String;
  fullName?: String;
  avatarUrl?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  status: () => Promise<String>;
  fullName: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Deployment {
  id: ID_Output;
  config?: Json;
  description?: String;
  label?: String;
  registryPassword?: String;
  releaseName?: String;
  version?: String;
  extraAu?: Int;
  airflowVersion?: String;
  alertEmails: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DeploymentPromise extends Promise<Deployment>, Fragmentable {
  id: () => Promise<ID_Output>;
  config: () => Promise<Json>;
  description: () => Promise<String>;
  label: () => Promise<String>;
  registryPassword: () => Promise<String>;
  releaseName: () => Promise<String>;
  version: () => Promise<String>;
  extraAu: () => Promise<Int>;
  airflowVersion: () => Promise<String>;
  alertEmails: () => Promise<String[]>;
  workspace: <T = WorkspacePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeploymentSubscription
  extends Promise<AsyncIterator<Deployment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  config: () => Promise<AsyncIterator<Json>>;
  description: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  registryPassword: () => Promise<AsyncIterator<String>>;
  releaseName: () => Promise<AsyncIterator<String>>;
  version: () => Promise<AsyncIterator<String>>;
  extraAu: () => Promise<AsyncIterator<Int>>;
  airflowVersion: () => Promise<AsyncIterator<String>>;
  alertEmails: () => Promise<AsyncIterator<String[]>>;
  workspace: <T = WorkspaceSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InviteTokenEdge {
  node: InviteToken;
  cursor: String;
}

export interface InviteTokenEdgePromise
  extends Promise<InviteTokenEdge>,
    Fragmentable {
  node: <T = InviteTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InviteTokenEdgeSubscription
  extends Promise<AsyncIterator<InviteTokenEdge>>,
    Fragmentable {
  node: <T = InviteTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Json = any;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Deployment",
    embedded: false
  },
  {
    name: "Email",
    embedded: false
  },
  {
    name: "InviteToken",
    embedded: false
  },
  {
    name: "LocalCredential",
    embedded: false
  },
  {
    name: "OAuthCredential",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "RoleBinding",
    embedded: false
  },
  {
    name: "ServiceAccount",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Workspace",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
